---
import PostCard from './Cards/PostCard.jsx'
import type { Post } from '../lib/sanity'
import { getAllPosts } from '../lib/sanity'

interface Props {
  relatedPosts: Post[]
  currentPostSlug: string
  currentPostCategory?: string
  currentPostTags?: string[]
}

const {
  relatedPosts = [],
  currentPostSlug,
  currentPostCategory,
  currentPostTags = [],
} = Astro.props

// Filter out the current post and limit to 2 related posts
let filteredRelatedPosts = relatedPosts
  .filter((post) => post.slug?.current !== currentPostSlug)
  .slice(0, 2)

// If no related posts are manually selected, find posts from same category or with similar tags
if (filteredRelatedPosts.length === 0) {
  const allPosts = await getAllPosts()
  const fallbackPosts = allPosts
    .filter((post) => post.slug?.current !== currentPostSlug)
    .filter((post) => {
      // Check if post has same category
      if (currentPostCategory && post.category === currentPostCategory) {
        return true
      }
      // Check if post has any matching tags
      if (currentPostTags.length > 0 && post.tags) {
        return currentPostTags.some((tag) => post.tags?.includes(tag))
      }
      return false
    })
    .sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime())
    .slice(0, 2)

  filteredRelatedPosts = fallbackPosts
}
---

{
  filteredRelatedPosts.length > 0 && (
    <section class='mt-16 pt-8 border-t border-zinc-200 dark:border-zinc-800'>
      <div class='mb-8'>
        <h2 class='text-2xl font-bold mb-2'>Related Posts</h2>
        <p class='text-zinc-600 dark:text-zinc-400'>You might also enjoy these articles</p>
      </div>

      <div class='grid grid-cols-1 md:grid-cols-2 gap-8'>
        {filteredRelatedPosts.map((post: Post) => (
          <PostCard post={post} />
        ))}
      </div>
    </section>
  )
}
