---
interface Props {
  outcomes: string[]
}

const { outcomes } = Astro.props
---

<section class="space-y-8">
  <h2 class="text-2xl md:text-3xl font-bold text-zinc-900 dark:text-zinc-100">
    Outcomes
  </h2>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {outcomes.map((outcome, index) => (
      <div 
        class="bg-zinc-50 dark:bg-zinc-800 rounded-lg p-6 border border-zinc-200 dark:border-zinc-700 hover:border-zinc-300 dark:hover:border-zinc-600 transition-colors"
        style={`animation-delay: ${index * 0.1}s`}
      >
        <!-- Outcome Number/Icon -->
        <div class="flex items-center mb-4">
          <div class="w-8 h-8 rounded-full bg-zinc-900 dark:bg-zinc-100 text-zinc-100 dark:text-zinc-900 flex items-center justify-center text-sm font-bold">
            {index + 1}
          </div>
        </div>
        
        <!-- Outcome Text -->
        <div class="space-y-2">
          <p class="text-base font-medium text-zinc-900 dark:text-zinc-100 leading-relaxed">
            {outcome}
          </p>
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  /* Subtle animation for outcome cards */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .grid > div {
    animation: fadeInUp 0.6s ease-out both;
  }
  
  /* Responsive grid adjustments */
  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
    }
  }
  
  @media (min-width: 1024px) and (max-width: 1280px) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>