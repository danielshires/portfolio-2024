---
// Client router
import '../styles/global.css'
import '../styles/fonts.css'
import Navigation from '../components/layout/navigation/Navigation.astro'
import Head from './Head.astro'
import LoadingBar from '../components/ui/loading/LoadingBar.astro'

interface Props {
  pageTitle: string
  pageDescription: string
  children?: any
}

const { pageTitle, pageDescription } = Astro.props
---

<!doctype html>
<html lang='en' class='text-base'>
  <meta name='theme-color' content='#fafafa' media='(prefers-color-scheme: light)' />
  <meta name='theme-color' content='#09090b' media='(prefers-color-scheme: dark)' />
  <style is:inline>
    html,
    body {
      background-color: rgb(250, 250, 250) !important;
    }
    @media (prefers-color-scheme: dark) {
      html,
      body {
        background-color: rgb(9, 9, 11) !important;
      }
    }
  </style>
  <script is:inline>
    // Set background color immediately to prevent flashing
    ;(function () {
      try {
        var theme = localStorage.getItem('theme')
        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
        var color = theme === 'dark' ? 'rgb(9, 9, 11)' : 'rgb(250, 250, 250)'
        document.documentElement.style.backgroundColor = color
        document.body.style.backgroundColor = color
      } catch (e) {}
    })()
  </script>
  <script>
    ;(function () {
      try {
        var theme = localStorage.getItem('theme')
        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      } catch (e) {}
    })()
  </script>
  <script is:inline>
    ;(function () {
      try {
        var theme = localStorage.getItem('theme')
        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        // Set background color immediately to prevent flashing
        var color = theme === 'dark' ? 'rgb(9, 9, 11)' : 'rgb(250, 250, 250)'
        var style = document.createElement('style')
        style.innerHTML = 'html,body{background:' + color + ' !important;}'
        document.head.appendChild(style)
      } catch (e) {}
    })()
  </script>
  <script is:inline>
    document.addEventListener('astro:after-swap', () => {
      try {
        var theme = localStorage.getItem('theme')
        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        // Immediately set background color after view transition
        var color = theme === 'dark' ? 'rgb(9, 9, 11)' : 'rgb(250, 250, 250)'
        document.documentElement.style.backgroundColor = color
        document.body.style.backgroundColor = color
      } catch (e) {}
    })
  </script>
  <Head pageDescription={pageDescription} pageTitle={pageTitle} />
  <body
    class='bg-background-light text-text-light dark:bg-background-dark dark:text-text-dark antialiased'>
    <LoadingBar />
    <Navigation transition:persist />
    <main class='container mx-auto px-8 lg:px-16'>
      <slot />
    </main>
  </body>
</html>

<style is:global>
  /* Disable default view transition animations to prevent flashing */
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* Ensure consistent background during transitions */
  html {
    background-color: var(--background-color) !important;
  }

  body {
    background-color: var(--background-color) !important;
    transition: background-color 0.2s ease-out;
  }

  /* Force background color during view transitions */
  ::view-transition-old(root) {
    background-color: rgb(250, 250, 250) !important;
  }

  ::view-transition-new(root) {
    background-color: rgb(250, 250, 250) !important;
  }

  /* Dark mode view transitions */
  .dark ::view-transition-old(root) {
    background-color: rgb(9, 9, 11) !important;
  }

  .dark ::view-transition-new(root) {
    background-color: rgb(9, 9, 11) !important;
  }

  /* Targeted transitions for theme-sensitive elements only */
  .theme-transition {
    transition:
      background-color 0.2s ease-out,
      color 0.2s ease-out,
      border-color 0.2s ease-out;
  }

  /* Subtle page entrance animation */
  main {
    animation: gentleFadeIn 0.3s ease-out;
  }

  @keyframes gentleFadeIn {
    from {
      opacity: 0;
      transform: translateY(3px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
