---
// Client router
import '../styles/global.css'
import '../styles/fonts.css'
import Navigation from '../components/layout/navigation/Navigation.astro'
import Footer from '../components/layout/Footer.astro'
import Head from './Head.astro'
import LoadingBar from '../components/ui/loading/LoadingBar.astro'
import SEO from '../components/common/SEO.astro'

interface Props {
  pageTitle: string
  pageDescription: string
  pageImage?: string
  pageUrl?: string
  pageType?: 'website' | 'article'
  children?: any
}

const { pageTitle, pageDescription, pageImage, pageUrl, pageType = 'website' } = Astro.props
---

<!doctype html>
<html lang='en' class='text-base'>
  <!-- Safari Mobile Status Bar and Navigation Colors -->
  <meta name='theme-color' content='#fafafa' media='(prefers-color-scheme: light)' />
  <meta name='theme-color' content='#09090b' media='(prefers-color-scheme: dark)' />

  <!-- iOS Safari Status Bar Style -->
  <meta name='apple-mobile-web-app-status-bar-style' content='default' />
  <meta name='apple-mobile-web-app-capable' content='yes' />

  <!-- Additional iOS Safari Integration -->
  <meta name='apple-mobile-web-app-title' content='{pageTitle}' />
  <meta name='format-detection' content='telephone=no' />
  <script is:inline>
    // âœ… SINGLE THEME INITIALIZATION - Prevent flash on initial load
    ;(function () {
      try {
        var theme = localStorage.getItem('theme')
        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
        // Apply theme immediately
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
        // Set background immediately to prevent flash
        var color = theme === 'dark' ? 'rgb(9, 9, 11)' : 'rgb(250, 250, 250)'
        document.documentElement.style.backgroundColor = color
        document.body.style.backgroundColor = color
      } catch (e) {}
    })()
  </script>
  <script is:inline>
    // Prevent flash on initial page load - use window property to avoid conflicts
    if (!window.swupInitialized) {
      window.swupInitialized = true

      // Suppress Swup syntax errors while keeping functionality
      var originalConsoleError = console.error
      console.error = function() {
        var message = arguments[0]
        if (typeof message === 'string' &&
            (message.indexOf('Unexpected token') !== -1 ||
             message.indexOf('SyntaxError') !== -1 ||
             message.indexOf('runScript') !== -1)) {
          // Suppress Swup-related syntax errors
          return
        }
        originalConsoleError.apply(console, arguments)
      }

      // Mark when Swup is enabled to prevent initial flash
      document.addEventListener('swup:enable', function() {
        document.documentElement.setAttribute('data-swup-enabled', 'true')
      })

      // Mark initial load as complete after page is fully loaded
      window.addEventListener('load', function() {
        setTimeout(() => {
          document.documentElement.setAttribute('data-initial-load-complete', 'true')
        }, 100)
      })
    }

    // Global script reinitialization for Swup transitions
    document.addEventListener('swup:contentReplaced', function() {
      // Dispatch custom event for components to reinitialize
      document.dispatchEvent(new CustomEvent('swup:reinitialize'))
    })

    // Only remove focus after transitions complete to avoid disrupting animations
    document.addEventListener('swup:transitionEnd', function() {
      const mainElement = document.querySelector('main.transition-fade')
      if (mainElement && mainElement === document.activeElement) {
        mainElement.blur()
        mainElement.style.outline = 'none'
        mainElement.style.boxShadow = 'none'
        mainElement.style.border = 'none'
      }
    })

    // Chrome-specific fix: Prevent focus entirely on both body and main
    if (!window.chromeFocusFixInitialized) {
      window.chromeFocusFixInitialized = true

      const chromeUserAgent = /Chrome/.test(navigator.userAgent)
      if (chromeUserAgent) {
        function removeFocusStyles() {
          const bodyElement = document.body
          const mainElement = document.querySelector('main.transition-fade')

          // Remove focus from body
          if (bodyElement) {
            bodyElement.style.setProperty('outline', 'none', 'important')
            bodyElement.style.setProperty('outline-color', 'transparent', 'important')
            bodyElement.style.setProperty('outline-style', 'none', 'important')
            bodyElement.style.setProperty('outline-width', '0', 'important')
            bodyElement.style.setProperty('box-shadow', 'none', 'important')
            bodyElement.blur()
          }

          // Remove focus from main
          if (mainElement) {
            mainElement.style.setProperty('outline', 'none', 'important')
            mainElement.style.setProperty('outline-color', 'transparent', 'important')
            mainElement.style.setProperty('outline-style', 'none', 'important')
            mainElement.style.setProperty('outline-width', '0', 'important')
            mainElement.blur()
          }
        }

        // Only apply focus removal after transitions complete, not during
        document.addEventListener('swup:transitionEnd', function() {
          setTimeout(removeFocusStyles, 100)
        })
      }
    }

    // Enhanced Navigation Active State Handler - Approach 2
    if (!window.navigationHandlerInitialized) {
      window.navigationHandlerInitialized = true

      function updateNavigationActiveState() {
        const currentPath = window.location.pathname.slice(1)
        const navLinks = document.querySelectorAll('[data-nav-path]')

        if (navLinks.length === 0) {
          return false
        }

        navLinks.forEach((link) => {
          const path = link.getAttribute('data-nav-path')
          const isActive = path === ''
            ? currentPath === ''
            : currentPath.startsWith(path) && path !== ''

          const baseClasses = 'text-zinc-900 dark:text-zinc-100 underline-offset-8'
          const activeClasses = `underline ${baseClasses}`
          const inactiveClasses = `no-underline hover:underline ${baseClasses}`

          link.className = isActive ? activeClasses : inactiveClasses
        })

        return true
      }

      // Enhanced timing for navigation updates
      function scheduleNavigationUpdate() {
        // Try immediate update
        if (updateNavigationActiveState()) {
          return
        }

        // Fallback: try after short delay
        setTimeout(() => {
          if (updateNavigationActiveState()) {
            return
          }

          // Final fallback: try after longer delay
          setTimeout(() => {
            updateNavigationActiveState()
          }, 100)
        }, 10)
      }

      // Update navigation on initial load
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => updateNavigationActiveState(), 0)
      })

      // Enhanced Swup event handling with multiple timing strategies
      document.addEventListener('swup:animationOutDone', scheduleNavigationUpdate)
      document.addEventListener('swup:contentReplaced', scheduleNavigationUpdate)
      document.addEventListener('swup:pageView', scheduleNavigationUpdate)
      document.addEventListener('swup:transitionEnd', scheduleNavigationUpdate)

      // Browser navigation
      window.addEventListener('popstate', scheduleNavigationUpdate)

      // Fallback: also try on URL changes
      let lastUrl = window.location.href
      setInterval(() => {
        if (window.location.href !== lastUrl) {
          lastUrl = window.location.href
          scheduleNavigationUpdate()
        }
      }, 100)
    }
  </script>
  <!-- Performance Monitoring for SEO -->
  <script is:inline>
    // Basic performance monitoring without web-vitals dependency
    if (!window.webVitalsInitialized) {
      window.webVitalsInitialized = true
    }

    // Track page load performance - with Swup-safe execution (silent)
    if (!window.performanceTrackingInitialized) {
      window.performanceTrackingInitialized = true

      window.addEventListener('load', function() {
        // Performance tracking runs silently
        var navigation = performance.getEntriesByType('navigation')[0]
        // Metrics collected but not logged to console
      })
    }

    // âœ… CURRENT WORKING THEME SYSTEM - Approach 4: Isolated theme manager
    if (!window.simpleThemeManagerInitialized) {
      window.simpleThemeManagerInitialized = true

      // Store current theme state
      window.currentThemeState = localStorage.getItem('theme') ||
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')

      function applyThemeDirectly(theme) {

        // Save to localStorage first
        localStorage.setItem('theme', theme)
        window.currentThemeState = theme

        // Apply to document
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        // Update CSS custom properties for background
        var bgColor = theme === 'dark' ? 'rgb(9, 9, 11)' : 'rgb(250, 250, 250)'
        var textColor = theme === 'dark' ? 'rgb(250, 250, 250)' : 'rgb(9, 9, 11)'
        document.documentElement.style.setProperty('--background-color', bgColor)
        document.documentElement.style.setProperty('--text-color', textColor)

        // Also set inline styles as fallback to ensure background changes immediately
        document.documentElement.style.backgroundColor = bgColor
        document.body.style.backgroundColor = bgColor

        // ðŸš¨ CRITICAL: Remove any conflicting Tailwind background classes from both html and body
        // This should remove bg-zinc-50 but something might be re-adding it
        document.documentElement.classList.remove('bg-zinc-50', 'bg-zinc-100', 'bg-zinc-900', 'bg-zinc-950', 'bg-background-light', 'bg-background-dark')
        document.body.classList.remove('bg-zinc-50', 'bg-zinc-100', 'bg-zinc-900', 'bg-zinc-950', 'bg-background-light', 'bg-background-dark')

        // ðŸ“± Update Safari mobile theme-color for iOS status bar
        var themeColorMeta = document.querySelector('meta[name="theme-color"]:not([media])')
        if (!themeColorMeta) {
          try {
            // Create a meta tag if it doesn't exist
            themeColorMeta = document.createElement('meta')
            themeColorMeta.name = 'theme-color'
            document.head.appendChild(themeColorMeta)
          } catch (e) {
            console.warn('Failed to create theme-color meta tag:', e)
            return
          }
        }
        if (themeColorMeta) {
          themeColorMeta.content = theme === 'dark' ? '#09090b' : '#fafafa'
        }

        // Update all theme toggle button icons
        var buttons = document.querySelectorAll('[data-theme-toggle]')
        buttons.forEach(function(button) {
          var sunIcon = button.querySelector('[data-sun-icon]')
          var moonIcon = button.querySelector('[data-moon-icon]')

          if (sunIcon && moonIcon) {
            if (theme === 'dark') {
              sunIcon.classList.remove('hidden')
              moonIcon.classList.add('hidden')
              button.setAttribute('aria-label', 'Switch to light mode')
            } else {
              sunIcon.classList.add('hidden')
              moonIcon.classList.remove('hidden')
              button.setAttribute('aria-label', 'Switch to dark mode')
            }
          }
        })
      }

      function toggleTheme() {
        var newTheme = window.currentThemeState === 'dark' ? 'light' : 'dark'
        applyThemeDirectly(newTheme)
      }

      // Simple click handler using event delegation
      document.addEventListener('click', function(event) {
        var button = event.target.closest('[data-theme-toggle]')
        if (button) {
          event.preventDefault()
          event.stopPropagation()
          toggleTheme()
        }
      })

      // Apply initial theme
      applyThemeDirectly(window.currentThemeState)

      // Reapply theme after Swup transitions - multiple events for reliability
      document.addEventListener('swup:contentReplaced', function() {
        applyThemeDirectly(window.currentThemeState)
      })

      document.addEventListener('swup:pageView', function() {
        applyThemeDirectly(window.currentThemeState)
      })

      document.addEventListener('swup:transitionEnd', function() {
        applyThemeDirectly(window.currentThemeState)
      })

      // Handle storage changes from other tabs
      window.addEventListener('storage', function(e) {
        if (e.key === 'theme' && e.newValue) {
          window.currentThemeState = e.newValue
          applyThemeDirectly(e.newValue)
        }
      })
    }

    // âœ¨ ELEMENT ANIMATION SYSTEM - Re-trigger animations after Swup page transitions
    if (!window.elementAnimationsInitialized) {
      window.elementAnimationsInitialized = true

      function triggerElementAnimations() {
        // Reset all animations first
        var animatedElements = document.querySelectorAll('[class*="animate-"]')
        animatedElements.forEach(function(element) {
          element.style.animation = 'none'
          element.offsetHeight // Force reflow
          element.style.animation = null
        })
      }

      // Trigger animations after Swup page changes
      document.addEventListener('swup:contentReplaced', function() {
        setTimeout(triggerElementAnimations, 50) // Small delay to ensure content is ready
      })

      document.addEventListener('swup:pageView', function() {
        setTimeout(triggerElementAnimations, 50)
      })

      // Also trigger on initial page load
      document.addEventListener('DOMContentLoaded', triggerElementAnimations)
      window.addEventListener('load', triggerElementAnimations)
    }

  </script>
  <Head pageDescription={pageDescription} pageTitle={pageTitle} />
  <SEO title={pageTitle} description={pageDescription} image={pageImage} type={pageType} />
  <body
    class='text-text-light dark:text-text-dark antialiased'
    tabindex="-1">
    <LoadingBar />
    <Navigation />
    <main class='container mx-auto px-8 lg:px-16 transition-fade' tabindex="-1">
      <slot />
    </main>
    <!-- <Footer /> -->
  </body>
</html>

<style is:global>
  /* Ensure consistent background during transitions */

  body {
    transition: background-color 0.2s ease-out;
  }

  /* Targeted transitions for theme-sensitive elements only */
  .theme-transition {
    transition:
      background-color 0.2s ease-out,
      color 0.2s ease-out,
      border-color 0.2s ease-out;
  }

  /* Swup slide + fade transition styling - only when Swup is active */
  html[data-swup-enabled] .transition-fade {
    transition:
      opacity 0.3s ease-out,
      transform 0.3s ease-out;
  }

  /* Page leaving animation - slide up and fade out */
  html.is-leaving .transition-fade {
    opacity: 0;
    transform: translateY(-20px);
  }

  /* Page entering animation - slide down and fade in */
  html.is-rendering .transition-fade {
    opacity: 0;
    transform: translateY(20px);
  }

  /* Prevent flash on initial load */
  .transition-fade {
    opacity: 1;
  }

  /* Remove focus outlines during and after Swup transitions */
  [data-swup-transition]:focus,
  [data-swup-transition]:focus-visible,
  html.is-changing [data-swup-transition]:focus,
  html.is-leaving [data-swup-transition]:focus,
  html.is-rendering [data-swup-transition]:focus,
  html.is-animating [data-swup-transition]:focus,
  main[data-swup-transition]:focus {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
  }

  /* Prevent any blue focus rings on main container */
  main[data-swup-transition] {
    outline: none !important;
  }

  /* Force remove all possible focus styles that could create blue lines */
  main[data-swup-transition],
  main[data-swup-transition]:focus,
  main[data-swup-transition]:focus-within,
  main[data-swup-transition]:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
    ring: none !important;
  }

  /* Override any Tailwind focus classes */
  .transition-fade:focus,
  .transition-fade:focus-visible,
  .transition-fade:focus-within {
    outline: none !important;
    box-shadow: none !important;
    --tw-ring-shadow: none !important;
    --tw-ring-offset-shadow: none !important;
  }

  /* Chrome-specific fix for blue focus lines */
  body, main {
    -webkit-tap-highlight-color: transparent !important;
    -webkit-focus-ring-color: transparent !important;
    outline: none !important;
  }

  /* Override focus styles on body element */
  body:focus,
  body:focus-visible,
  body:focus-within {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
  }

  /* Force Chrome to never show focus rings on body and main */
  @supports (-webkit-appearance: none) {
    body, main.transition-fade {
      outline: none !important;
      outline-offset: 0 !important;
      outline-color: transparent !important;
      outline-style: none !important;
      outline-width: 0 !important;
    }

    body:focus, main.transition-fade:focus {
      outline: none !important;
      outline-offset: 0 !important;
      outline-color: transparent !important;
      outline-style: none !important;
      outline-width: 0 !important;
    }
  }

  /* Completely disable focus on main element */
  main.transition-fade {
    outline: none !important;
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    pointer-events: auto !important;
  }

  main.transition-fade:focus,
  main.transition-fade:active,
  main.transition-fade:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
  }

  /* Subtle page entrance animation - only for non-Swup navigation and not initial load */
  html[data-initial-load-complete]:not([data-swup-enabled]) main {
    animation: gentleFadeIn 0.02s ease-out;
  }

  @keyframes gentleFadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* âœ¨ STAGGERED ELEMENT ANIMATIONS - Add these classes to any element */

  /* Fade in elements with different delays after page loads */
  .animate-fade-in {
    opacity: 0;
    transform: translateY(30px);
    animation: elementFadeIn 0.6s ease-out forwards;
  }

  .animate-fade-in-delay-1 {
    opacity: 0;
    transform: translateY(30px);
    animation: elementFadeIn 0.6s ease-out 0.1s forwards;
  }

  .animate-fade-in-delay-2 {
    opacity: 0;
    transform: translateY(30px);
    animation: elementFadeIn 0.6s ease-out 0.2s forwards;
  }

  .animate-fade-in-delay-3 {
    opacity: 0;
    transform: translateY(30px);
    animation: elementFadeIn 0.6s ease-out 0.3s forwards;
  }

  .animate-fade-in-delay-4 {
    opacity: 0;
    transform: translateY(30px);
    animation: elementFadeIn 0.6s ease-out 0.4s forwards;
  }

  /* Different animation styles */
  .animate-slide-left {
    opacity: 0;
    transform: translateX(-50px);
    animation: slideInLeft 0.7s ease-out 0.2s forwards;
  }

  .animate-slide-right {
    opacity: 0;
    transform: translateX(50px);
    animation: slideInRight 0.7s ease-out 0.2s forwards;
  }

  .animate-scale-in {
    opacity: 0;
    transform: scale(0.8);
    animation: scaleIn 0.5s ease-out 0.3s forwards;
  }

  /* Keyframe definitions */
  @keyframes elementFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Re-trigger animations after Swup page transitions */
  html[data-swup-enabled] .animate-fade-in,
  html[data-swup-enabled] .animate-fade-in-delay-1,
  html[data-swup-enabled] .animate-fade-in-delay-2,
  html[data-swup-enabled] .animate-fade-in-delay-3,
  html[data-swup-enabled] .animate-fade-in-delay-4,
  html[data-swup-enabled] .animate-slide-left,
  html[data-swup-enabled] .animate-slide-right,
  html[data-swup-enabled] .animate-scale-in {
    animation-play-state: paused;
  }

  /* Trigger animations when new page loads */
  html[data-swup-enabled].is-animating .animate-fade-in,
  html[data-swup-enabled].is-animating .animate-fade-in-delay-1,
  html[data-swup-enabled].is-animating .animate-fade-in-delay-2,
  html[data-swup-enabled].is-animating .animate-fade-in-delay-3,
  html[data-swup-enabled].is-animating .animate-fade-in-delay-4,
  html[data-swup-enabled].is-animating .animate-slide-left,
  html[data-swup-enabled].is-animating .animate-slide-right,
  html[data-swup-enabled].is-animating .animate-scale-in {
    animation-play-state: running;
  }

  /* Button hover optimizations */
  button, a[role="button"], .btn {
    will-change: transform;
  }

  /* Theme toggle specific optimizations */
  [data-theme-toggle] {
    will-change: transform;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    button, a[role="button"], .btn, [data-theme-toggle] {
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease !important;
    }

    button:hover, a[role="button"]:hover, .btn:hover, [data-theme-toggle]:hover {
      transform: none !important;
      animation: none !important;
    }

    [data-theme-toggle] svg {
      transition: none !important;
      transform: none !important;
    }
  }
</style>
